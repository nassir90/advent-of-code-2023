(ql:quickload "uiop")
(ql:quickload "cl-ppcre")

(defvar state 'do)

(defun handle-line (line)
  (format t "===line===~%" left right)
  (let ((sum 0))
    (cl-ppcre:do-matches-as-strings (match "mul\\(\\d+,\\d+\\)|do\\(\\)|don't\\(\\)" line)
      (cond ((string-equal "do()" match)
             (format t "do~%" match)
               (setf state 'do))
            ((string-equal "don't()" match)
             (format t "dont~%" match)
             (setf state 'dont))
            ((eq state 'dont)
             (format t "ignoring: ~A~%" match))
            ((eq state 'do)
             (format t "using   : ~A~%" match)
             (cl-ppcre:do-register-groups (left right) ("(\\d+),(\\d+)" match)
               ;; (format t "~A * ~A~%" left right)
               (setf sum (+ sum (* (read-from-string left) (read-from-string right))))))))
    sum))
(defun main ()
  (let ((state 'do))
    (loop for line in (uiop:read-file-lines "input")
          sum (handle-line line))))

(defun small-case ()
  (handle-line (car (uiop:read-file-lines "input"))))

(main)